{"version":3,"sources":["../node_modules/mersenne-twister/src/mersenne-twister.js","../src/index.ts"],"sourcesContent":["/*\n  https://github.com/banksean wrapped Makoto Matsumoto and Takuji Nishimura's code in a namespace\n  so it's better encapsulated. Now you can have multiple random number generators\n  and they won't stomp all over eachother's state.\n\n  If you want to use this as a substitute for Math.random(), use the random()\n  method like so:\n\n  var m = new MersenneTwister();\n  var randomNumber = m.random();\n\n  You can also call the other genrand_{foo}() methods on the instance.\n\n  If you want to use a specific seed in order to get a repeatable random\n  sequence, pass an integer into the constructor:\n\n  var m = new MersenneTwister(123);\n\n  and that will always produce the same random sequence.\n\n  Sean McCullough (banksean@gmail.com)\n*/\n\n/*\n   A C-program for MT19937, with initialization improved 2002/1/26.\n   Coded by Takuji Nishimura and Makoto Matsumoto.\n\n   Before using, initialize the state by using init_seed(seed)\n   or init_by_array(init_key, key_length).\n\n   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\n   All rights reserved.\n\n   Redistribution and use in source and binary forms, with or without\n   modification, are permitted provided that the following conditions\n   are met:\n\n     1. Redistributions of source code must retain the above copyright\n        notice, this list of conditions and the following disclaimer.\n\n     2. Redistributions in binary form must reproduce the above copyright\n        notice, this list of conditions and the following disclaimer in the\n        documentation and/or other materials provided with the distribution.\n\n     3. The names of its contributors may not be used to endorse or promote\n        products derived from this software without specific prior written\n        permission.\n\n   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n   \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n   Any feedback is very welcome.\n   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html\n   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)\n*/\n\nvar MersenneTwister = function(seed) {\n\tif (seed == undefined) {\n\t\tseed = new Date().getTime();\n\t}\n\n\t/* Period parameters */\n\tthis.N = 624;\n\tthis.M = 397;\n\tthis.MATRIX_A = 0x9908b0df;   /* constant vector a */\n\tthis.UPPER_MASK = 0x80000000; /* most significant w-r bits */\n\tthis.LOWER_MASK = 0x7fffffff; /* least significant r bits */\n\n\tthis.mt = new Array(this.N); /* the array for the state vector */\n\tthis.mti=this.N+1; /* mti==N+1 means mt[N] is not initialized */\n\n\tif (seed.constructor == Array) {\n\t\tthis.init_by_array(seed, seed.length);\n\t}\n\telse {\n\t\tthis.init_seed(seed);\n\t}\n}\n\n/* initializes mt[N] with a seed */\n/* origin name init_genrand */\nMersenneTwister.prototype.init_seed = function(s) {\n\tthis.mt[0] = s >>> 0;\n\tfor (this.mti=1; this.mti<this.N; this.mti++) {\n\t\tvar s = this.mt[this.mti-1] ^ (this.mt[this.mti-1] >>> 30);\n\t\tthis.mt[this.mti] = (((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253)\n\t\t+ this.mti;\n\t\t/* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */\n\t\t/* In the previous versions, MSBs of the seed affect   */\n\t\t/* only MSBs of the array mt[].                        */\n\t\t/* 2002/01/09 modified by Makoto Matsumoto             */\n\t\tthis.mt[this.mti] >>>= 0;\n\t\t/* for >32 bit machines */\n\t}\n}\n\n/* initialize by an array with array-length */\n/* init_key is the array for initializing keys */\n/* key_length is its length */\n/* slight change for C++, 2004/2/26 */\nMersenneTwister.prototype.init_by_array = function(init_key, key_length) {\n\tvar i, j, k;\n\tthis.init_seed(19650218);\n\ti=1; j=0;\n\tk = (this.N>key_length ? this.N : key_length);\n\tfor (; k; k--) {\n\t\tvar s = this.mt[i-1] ^ (this.mt[i-1] >>> 30)\n\t\tthis.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1664525) << 16) + ((s & 0x0000ffff) * 1664525)))\n\t\t+ init_key[j] + j; /* non linear */\n\t\tthis.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */\n\t\ti++; j++;\n\t\tif (i>=this.N) { this.mt[0] = this.mt[this.N-1]; i=1; }\n\t\tif (j>=key_length) j=0;\n\t}\n\tfor (k=this.N-1; k; k--) {\n\t\tvar s = this.mt[i-1] ^ (this.mt[i-1] >>> 30);\n\t\tthis.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1566083941) << 16) + (s & 0x0000ffff) * 1566083941))\n\t\t- i; /* non linear */\n\t\tthis.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */\n\t\ti++;\n\t\tif (i>=this.N) { this.mt[0] = this.mt[this.N-1]; i=1; }\n\t}\n\n\tthis.mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */\n}\n\n/* generates a random number on [0,0xffffffff]-interval */\n/* origin name genrand_int32 */\nMersenneTwister.prototype.random_int = function() {\n\tvar y;\n\tvar mag01 = new Array(0x0, this.MATRIX_A);\n\t/* mag01[x] = x * MATRIX_A  for x=0,1 */\n\n\tif (this.mti >= this.N) { /* generate N words at one time */\n\t\tvar kk;\n\n\t\tif (this.mti == this.N+1)  /* if init_seed() has not been called, */\n\t\t\tthis.init_seed(5489);  /* a default initial seed is used */\n\n\t\tfor (kk=0;kk<this.N-this.M;kk++) {\n\t\t\ty = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk+1]&this.LOWER_MASK);\n\t\t\tthis.mt[kk] = this.mt[kk+this.M] ^ (y >>> 1) ^ mag01[y & 0x1];\n\t\t}\n\t\tfor (;kk<this.N-1;kk++) {\n\t\t\ty = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk+1]&this.LOWER_MASK);\n\t\t\tthis.mt[kk] = this.mt[kk+(this.M-this.N)] ^ (y >>> 1) ^ mag01[y & 0x1];\n\t\t}\n\t\ty = (this.mt[this.N-1]&this.UPPER_MASK)|(this.mt[0]&this.LOWER_MASK);\n\t\tthis.mt[this.N-1] = this.mt[this.M-1] ^ (y >>> 1) ^ mag01[y & 0x1];\n\n\t\tthis.mti = 0;\n\t}\n\n\ty = this.mt[this.mti++];\n\n\t/* Tempering */\n\ty ^= (y >>> 11);\n\ty ^= (y << 7) & 0x9d2c5680;\n\ty ^= (y << 15) & 0xefc60000;\n\ty ^= (y >>> 18);\n\n\treturn y >>> 0;\n}\n\n/* generates a random number on [0,0x7fffffff]-interval */\n/* origin name genrand_int31 */\nMersenneTwister.prototype.random_int31 = function() {\n\treturn (this.random_int()>>>1);\n}\n\n/* generates a random number on [0,1]-real-interval */\n/* origin name genrand_real1 */\nMersenneTwister.prototype.random_incl = function() {\n\treturn this.random_int()*(1.0/4294967295.0);\n\t/* divided by 2^32-1 */\n}\n\n/* generates a random number on [0,1)-real-interval */\nMersenneTwister.prototype.random = function() {\n\treturn this.random_int()*(1.0/4294967296.0);\n\t/* divided by 2^32 */\n}\n\n/* generates a random number on (0,1)-real-interval */\n/* origin name genrand_real3 */\nMersenneTwister.prototype.random_excl = function() {\n\treturn (this.random_int() + 0.5)*(1.0/4294967296.0);\n\t/* divided by 2^32 */\n}\n\n/* generates a random number on [0,1) with 53-bit resolution*/\n/* origin name genrand_res53 */\nMersenneTwister.prototype.random_long = function() {\n\tvar a=this.random_int()>>>5, b=this.random_int()>>>6;\n\treturn(a*67108864.0+b)*(1.0/9007199254740992.0);\n}\n\n/* These real versions are due to Isaku Wada, 2002/01/09 added */\n\nmodule.exports = MersenneTwister;\n","import MersenneTwister from \"mersenne-twister\";\n\ninterface Coordinates {\n  latitude: number;\n  longitude: number;\n}\n\n/**\n * Given POI A with a latitude and longitude, generate POI B with a random latitude & longitude within min & max distance\n *\n * @param {number} latitude         Latitude\n * @param {number} longitude        Longitude\n * @param {number} minDistance      Minimum distance of POI from given coordinates (in metres)\n * @param {number} maxDistance      Maximum distance of POI from given coordinates (in metres)\n * @returns {object}                New, random coordinates (latitude & longitude)\n */\nfunction getLocationAwayFromPOI(\n  latitude: number,\n  longitude: number,\n  minDistance: number,\n  maxDistance: number\n): Coordinates {\n  // random_excl() helps to ensure ∀x∊(0, 1)\n  const { random_excl } = new MersenneTwister();\n  const { PI, cos, acos, sqrt, min, max, floor } = Math;\n\n  // Equatorial and polar radii extrema\n  const earthPolarRadius = 6356.7523;\n  const earthEquatorialRadius = 6378.137;\n\n  // Convert metres to km\n  minDistance = max(minDistance || 0, 1) / 1000;\n  maxDistance = max(maxDistance || 0, 1) / 1000;\n\n  // Degrees to rad\n  const latitudeRad = latitude * (PI / 180);\n  const longitudeRad = longitude * (PI / 180);\n\n  // Constraints: minDistance < distance < maxDistance\n  const md = minDistance ** 2;\n  const distance = min(\n    maxDistance,\n    sqrt(random_excl() * (maxDistance ** 2 - md) + md)\n  );\n\n  // Use Haversine Formula so given [lat1, lon1], we need to find new [lat2, lon2]\n\n  let newLatitude = cos(random_excl() * PI) * (distance / earthPolarRadius);\n\n  let newLongitude =\n    (cos(distance / earthEquatorialRadius) - cos(newLatitude)) /\n      (cos(latitudeRad) * cos(newLatitude - latitudeRad)) +\n    1;\n\n  // Ensure that ∀x∊[-1, 1]\n  newLongitude = acos(max(-1, min(1, newLongitude)));\n\n  // Use simple randomness: -1 ∨ 1 so to either add or subtract from given coordinates\n  const posNegLatitude = floor(random_excl() * 2) ? -1 : 1;\n  const posNegLongitude = floor(random_excl() * 2) ? -1 : 1;\n\n  newLatitude *= posNegLatitude;\n  newLongitude *= posNegLongitude;\n\n  // Prev + delta convert rads to degress\n  newLatitude = (latitudeRad + newLatitude) * (180 / PI);\n  newLongitude = (longitudeRad + newLongitude) * (180 / PI);\n\n  return {\n    latitude: newLatitude,\n    longitude: newLongitude,\n  };\n}\n\nexport { getLocationAwayFromPOI };\n"],"mappings":"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","names":["require_mersenne_twister","__commonJSMin","exports","module","MersenneTwister","seed","s","init_key","key_length","j","k","y","mag01","kk","a","b","import_mersenne_twister","getLocationAwayFromPOI","latitude","longitude","minDistance","maxDistance","random_excl","MersenneTwister","PI","cos","acos","sqrt","min","max","floor","earthPolarRadius","earthEquatorialRadius","latitudeRad","longitudeRad","md","distance","newLatitude","newLongitude","posNegLatitude","posNegLongitude"]}